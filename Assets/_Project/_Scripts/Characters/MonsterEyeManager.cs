using System.Collections;using System.Collections.Generic;using BehaviorDesigner.Runtime;using DG.Tweening;using Unity.Mathematics;using UnityEngine;using UnityEngine.Serialization;using Random = UnityEngine.Random;public class MonsterEyeManager : MonoBehaviour{    [SerializeField] public MonsterState CurrentState { get; private set; }    [SerializeField] private Transform defaultEye;    [SerializeField] private Transform mawEye;    [SerializeField] private Transform eyeBall;    [SerializeField] private SpriteRenderer eyeRenderer;    [SerializeField] private SpriteRenderer pupilRenderer;    [SerializeField] private EyeTracker eyeTracker;    //time can be edited in-engine    [SerializeField] private float timer = 3f;    private int _blinkProcess = 0;    private bool _isBlinking = false;    private MonsterBase _monsterBase;    private MonsterSO _monsterStats;    private void Awake()    {        _monsterBase = GetComponent<MonsterBase>();        _monsterStats = _monsterBase.GetMonsterStats();    }        public void UpdateBlink()    {                BlinkTimer();        if (_monsterBase.CurrentState != MonsterState.Chasing && _isBlinking)        {            EyeBlink();        }           }    #region blink    void BlinkTimer()    {        timer-=Time.deltaTime;        //when the timer expires, go to Blinking (Blinking then goes to Tracking)        if(timer > 0){            return;        }        _isBlinking = true;        timer = Random.Range(3f, 8f);    }    //blinking process    //we need to make this frame independent    void EyeBlink()    {        if(_blinkProcess == 0)        {            //If you really think about it, blinking is just getting smaller in one direction            eyeBall.localScale = new Vector3(eyeBall.localScale.x, eyeBall.localScale.y + (Vector3.down * _monsterStats.EyeBallShutSpeed * Time.deltaTime).y, eyeBall.localScale.z);            //It's true--your pupils descend when you blink            //_pupil.position += Vector3.down * _monsterStats.PupilDropSpeed;            if(eyeBall.localScale.y <= 0)            {                _blinkProcess++;                /*if(eyeRenderer.sprite != _monsterStats.SpriteBall){                    eyeRenderer.sprite = _monsterStats.SpriteBall;                    pupilRenderer.enabled = true;                }*/            }        }        else if(_blinkProcess == 1)        {            eyeBall.localScale =  new Vector3(eyeBall.localScale.x, Mathf.Clamp(eyeBall.localScale.y + (Vector3.up * _monsterStats.EyeBallShutSpeed * Time.deltaTime).y, 0, 1) , eyeBall.localScale.z);            //_pupil.position += Vector3.up * _monsterStats.PupilDropSpeed;            if(eyeBall.localScale.y >= 1)            {                _blinkProcess++;            }        }        else        {            //if not tracking playerCharacter, then move ir forward so it looks like is looking at the direction of the movemnet            CurrentState = MonsterState.Default;            _blinkProcess = 0;            _isBlinking = false;        }    }    #endregion        //corresponding changes in the eye from new state    public void OnUpdateMonsterState()    {        //stuff that always happens when changing states        _blinkProcess = 0;        eyeBall.localScale = Vector3.one;                switch (_monsterBase.CurrentState)        {            case MonsterState.Chasing:                eyeTracker.TrackTarget(false);                defaultEye.gameObject.SetActive(false);                mawEye.gameObject.SetActive(true);                                //reset position just in case                //defaultEye.localPosition = Vector3.zero;                break;            case MonsterState.Follow:                eyeTracker.TrackTarget(true);                defaultEye.gameObject.SetActive(true);                mawEye.gameObject.SetActive(false);                //make pupil visible again                //eyeRenderer.sprite = _monsterStats.SpriteBall;                //pupilRenderer.enabled = true;                break;            case MonsterState.Frustrated:                eyeTracker.TrackTarget(true);                defaultEye.gameObject.SetActive(true);                mawEye.gameObject.SetActive(false);                                //eyeRenderer.sprite = _monsterStats.SpriteBall;                //pupilRenderer.enabled = true;                                break;            case MonsterState.Default:                eyeTracker.TrackTarget(false);                defaultEye.gameObject.SetActive(true);                mawEye.gameObject.SetActive(false);                                //return pupil size                //defaultEye.localPosition = Vector3.up * 0.75f;                //defaultEye.localRotation = quaternion.identity;                //make pupil visible again                //eyeRenderer.sprite = _monsterStats.SpriteBall;                //pupilRenderer.enabled = true;                break;                    }    }}